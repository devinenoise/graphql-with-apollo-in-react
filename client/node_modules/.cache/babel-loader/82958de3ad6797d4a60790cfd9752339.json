{"ast":null,"code":"var _jsxFileName = \"K:\\\\Coding\\\\graphql-demo\\\\client\\\\src\\\\App.js\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { GetUsers } from './';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst errorLink = onError(({\n  graphqlErrors,\n  networkErrors\n}) => {\n  if (graphqlErrors) {\n    graphqlErrors.map(({\n      message,\n      location,\n      path\n    }) => {\n      alert(`GraphQL error ${message}`);\n    });\n  }\n});\nconst link = from([errorLink, new HttpLink({\n  uri: 'http://localhost:4000/graphql'\n})]); //apollo client instance\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n});\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(GetUsers, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["K:/Coding/graphql-demo/client/src/App.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","HttpLink","from","onError","GetUsers","errorLink","graphqlErrors","networkErrors","map","message","location","path","alert","link","uri","client","cache","App"],"mappings":";AAAA,SACEA,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,IALF,QAMO,gBANP;AAOA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,QAAT,QAAyB,IAAzB;;AAEA,MAAMC,SAAS,GAAGF,OAAO,CAAC,CAAC;AAAEG,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAsC;AAC9D,MAAID,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACE,GAAd,CAAkB,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,QAAX;AAAqBC,MAAAA;AAArB,KAAD,KAAiC;AACjDC,MAAAA,KAAK,CAAE,iBAAgBH,OAAQ,EAA1B,CAAL;AACD,KAFD;AAGD;AACF,CANwB,CAAzB;AAQA,MAAMI,IAAI,GAAGX,IAAI,CAAC,CAChBG,SADgB,EAEhB,IAAIJ,QAAJ,CAAa;AACXa,EAAAA,GAAG,EAAE;AADM,CAAb,CAFgB,CAAD,CAAjB,C,CAOA;;AACA,MAAMC,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC9BkB,EAAAA,KAAK,EAAE,IAAIjB,aAAJ,EADuB;AAE9Bc,EAAAA,IAAI,EAAEA;AAFwB,CAAjB,CAAf;;AAKA,SAASI,GAAT,GAAe;AACb,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEF,MAAxB;AAAA,2BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;KANQE,G;AAQT,eAAeA,GAAf","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from\n} from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { GetUsers } from './';\n\nconst errorLink = onError(({ graphqlErrors, networkErrors }) => {\n  if (graphqlErrors) {\n    graphqlErrors.map(({ message, location, path }) => {\n      alert(`GraphQL error ${message}`);\n    });\n  }\n});\n\nconst link = from([\n  errorLink,\n  new HttpLink({\n    uri: 'http://localhost:4000/graphql'\n  })\n]);\n\n//apollo client instance\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <GetUsers />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}